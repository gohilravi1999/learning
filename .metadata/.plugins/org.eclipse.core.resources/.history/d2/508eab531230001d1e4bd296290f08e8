package com.learning.shared.util;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import javax.validation.Validator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.learning.shared.bean.ResponseBean;

@Component
public class JsonUtil {
	
	private static Validator validator;
	
	@Autowired
	private JsonUtil(Validator validator) {
		JsonUtil.validator = validator;
	}
	

	public static <T> ResponseBean<T> createResponseBean(int statusCode, String message, T responseData){
		ResponseBean<T> responseBean = new ResponseBean<T>();
		responseBean.setStatusCode(statusCode);
		responseBean.setMessage(message);
		responseBean.setResponseData(responseData);
		return responseBean;
	}
	
	public static <T> T createRequestBean(String requestBody) throws Exception{
		TypeReference<T> token = new TypeReference<T>() {};
		ObjectMapper mapper = new ObjectMapper();
		T requestBean = (T) mapper.readValue(requestBody.getBytes(), token);
		Set<ConstraintViolation<T>> violations = validator.validate(requestBean);

        if (!violations.isEmpty()) {
            StringBuilder sb = new StringBuilder();
            for (ConstraintViolation<T> constraintViolation : violations) {
                sb.append(constraintViolation.getMessage());
            }
            throw new ConstraintViolationException("Error occurred: " + sb.toString(), violations);
        }
        
		return requestBean;
	}
}
